// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  password       String
  username       String   @default("anonymous") @unique
  createdAt      DateTime @default(now())
  sentMessages   Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageRecipient")
  email           String    @default("anonymous") @unique
  followers FollowRequest[]   @relation("followers")
  following FollowRequest[]   @relation("following")
  posts       Post[]          
  comments       Comment[]
  likes          Like[]
}

model FollowRequest {
  id        String   @id @default(cuid())
  sender    User     @relation("followers", fields: [senderUsername], references: [username])
  senderUsername  String
  receiver  User     @relation("following", fields: [receiverUsername], references: [username])
  receiverUsername String
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Post {
  id        String   @id @default(cuid())
  content   String
  user    User     @relation(fields: [username], references: [username])
  username  String    @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user    User     @relation(fields: [username], references: [username])
  username  String     @unique
  post      Post     @relation(fields: [postUsername], references: [username])
  postUsername   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [username], references: [username])
  username   String    @unique
  post      Post     @relation(fields: [postUsername], references: [username])
  postUsername   String
  createdAt DateTime @default(now())
}


model Message {
  id        String   @id @default(cuid())
  sender    User     @relation("MessageSender", fields: [senderUsername], references: [username])
  senderUsername  String
  recipient User     @relation("MessageRecipient", fields: [recipientUsername], references: [username])
  recipientUsername  String  
  messages     String 
  createdAt DateTime @default(now())
}


model Profile {
  id        String   @id @default(cuid())
  profilename  String  @unique
  bio          String  @default("anonymous")
  name         String  @default("anonymous")
  location        String?
  pronoun         String?
  pictures     Picture[]
}

model Picture {
  id        String   @id @default(cuid())
  picturename       String
  fileSize  Int       @default(0)
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @default("some-default-profile-id")
  createdAt DateTime @default(now())
}

